name: Build All Platforms

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [non-llm, llm-cpu, llm-cuda, llm-amd]
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: '3.12'
          
      - name: Setup build environment
        working-directory: legacy
        run: |
          uv sync
          
      - name: Install variant dependencies
        working-directory: legacy
        run: |
          if ("${{ matrix.variant }}" -eq "llm-cpu") {
            uv sync --extra llm-cpu
          } elseif ("${{ matrix.variant }}" -eq "llm-cuda") {
            uv sync --extra llm-cuda
          } elseif ("${{ matrix.variant }}" -eq "llm-amd") {
            uv sync --extra llm-amd
          }
          
      - name: Install PyInstaller
        working-directory: legacy
        run: uv add --dev pyinstaller
        
      - name: Create assets directories
        working-directory: legacy
        run: |
          if (!(Test-Path "photos")) { New-Item -ItemType Directory -Name "photos" }
          if (!(Test-Path "music")) { New-Item -ItemType Directory -Name "music" }
          
      - name: Build executable
        working-directory: legacy
        run: |
          $dataArgs = ""
          if (Test-Path "photos") { $dataArgs += "--add-data photos;photos " }
          if (Test-Path "music") { $dataArgs += "--add-data music;music " }
          
          $cmd = "uv run pyinstaller --onefile $dataArgs --clean --name midori-autofighter-${{ matrix.variant }}-windows main.py"
          Invoke-Expression $cmd
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-${{ matrix.variant }}-windows
          path: legacy/dist/midori-autofighter-${{ matrix.variant }}-windows.exe
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [non-llm, llm-cpu, llm-cuda, llm-amd]
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: '3.12'
          
      - name: Setup build environment
        working-directory: legacy
        run: |
          uv sync
          
      - name: Install variant dependencies
        working-directory: legacy
        run: |
          case "${{ matrix.variant }}" in
            "llm-cpu")
              uv sync --extra llm-cpu
              ;;
            "llm-cuda")
              uv sync --extra llm-cuda
              ;;
            "llm-amd")
              uv sync --extra llm-amd
              ;;
          esac
          
      - name: Install PyInstaller
        working-directory: legacy
        run: uv add --dev pyinstaller
        
      - name: Create assets directories
        working-directory: legacy
        run: |
          mkdir -p photos music
          
      - name: Build executable
        working-directory: legacy
        run: |
          DATA_ARGS=""
          if [ -d "photos" ]; then
            DATA_ARGS="$DATA_ARGS --add-data photos:photos"
          fi
          if [ -d "music" ]; then
            DATA_ARGS="$DATA_ARGS --add-data music:music"
          fi
          
          uv run pyinstaller --onefile $DATA_ARGS --clean --name midori-autofighter-${{ matrix.variant }}-linux main.py
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-${{ matrix.variant }}-linux
          path: legacy/dist/midori-autofighter-${{ matrix.variant }}-linux
          retention-days: 30

  build-android:
    runs-on: ubuntu-latest
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip build-essential git python3-dev ffmpeg libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev
          pip install buildozer cython
          
      - name: Create buildozer.spec
        working-directory: legacy
        run: |
          cat > buildozer.spec << 'EOF'
          [app]
          title = Midori AutoFighter
          package.name = midoriautofighter
          package.domain = ai.midori
          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas,wav,mp3,ogg,json
          version = 0.1
          requirements = python3,kivy,pygame
          
          [buildozer]
          log_level = 2
          warn_on_root = 1
          
          [app:android]
          fullscreen = 1
          orientation = landscape
          permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE
          android.minapi = 21
          android.sdk = 31
          android.ndk = 25b
          android.gradle_dependencies = 
          
          EOF
          
      - name: Create Android-compatible main
        working-directory: legacy
        run: |
          # Create a simplified version for Android
          cat > main_android.py << 'EOF'
          import os
          import sys
          
          # Add current directory to path for imports
          sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
          
          try:
              from gamestates import main
              from load_photos import cleanup_temp_dirs
          except ImportError:
              # Fallback for Android build
              def main(mode):
                  print("Midori AutoFighter - Android version")
                  print("Game is starting...")
                  # Minimal game loop for Android
                  import time
                  time.sleep(1)
                  
              def cleanup_temp_dirs():
                  pass
          
          if __name__ == "__main__":
              try:
                  main(1)
                  cleanup_temp_dirs()
              except Exception as error:
                  print(f"Error: {str(error)}")
          EOF
          
      - name: Create assets directories
        working-directory: legacy
        run: |
          mkdir -p photos music
          # Create dummy assets for Android build
          echo "# Placeholder" > photos/placeholder.txt
          echo "# Placeholder" > music/placeholder.txt
          
      - name: Build Android APK
        working-directory: legacy
        run: |
          # Copy main file for Android
          cp main_android.py main.py
          
          # Initialize buildozer
          buildozer android debug
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-non-llm-android
          path: legacy/bin/*.apk
          retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*/*
          body: |
            ## Midori AutoFighter Release
            
            This release includes builds for:
            
            ### Windows
            - midori-autofighter-non-llm-windows.exe (Base game)
            - midori-autofighter-llm-cpu-windows.exe (CPU-based LLM support)
            - midori-autofighter-llm-cuda-windows.exe (NVIDIA GPU LLM support)
            - midori-autofighter-llm-amd-windows.exe (AMD GPU LLM support)
            
            ### Linux
            - midori-autofighter-non-llm-linux (Base game)
            - midori-autofighter-llm-cpu-linux (CPU-based LLM support)
            - midori-autofighter-llm-cuda-linux (NVIDIA GPU LLM support)
            - midori-autofighter-llm-amd-linux (AMD GPU LLM support)
            
            ### Android
            - midori-autofighter-non-llm-android.apk (Base game)
            
            Download the appropriate version for your platform and LLM requirements.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}