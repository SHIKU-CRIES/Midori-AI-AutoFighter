name: Build All Platforms

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [non-llm, llm-cpu, llm-cuda, llm-amd]
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: '3.12'
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install bun
        run: |
          powershell -c "irm bun.sh/install.ps1|iex"
          echo "$env:USERPROFILE\.bun\bin" >> $env:GITHUB_PATH
          
      - name: Setup backend environment
        working-directory: backend
        run: |
          uv sync
          
      - name: Install backend variant dependencies
        working-directory: backend
        run: |
          if ("${{ matrix.variant }}" -eq "llm-cpu") {
            uv sync --extra llm-cpu
          } elseif ("${{ matrix.variant }}" -eq "llm-cuda") {
            uv sync --extra llm-cuda
          } elseif ("${{ matrix.variant }}" -eq "llm-amd") {
            uv sync --extra llm-amd
          }
          
      - name: Install PyInstaller for backend
        working-directory: backend
        run: uv add --dev pyinstaller
        
      - name: Build frontend
        working-directory: frontend
        run: |
          bun install
          bun run build
          
      - name: Build backend executable
        working-directory: backend
        run: |
          $dataArgs = "--add-data ../frontend/build;frontend"
          $cmd = "uv run pyinstaller --onefile $dataArgs --clean --name midori-autofighter-${{ matrix.variant }}-windows app.py"
          Invoke-Expression $cmd
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-${{ matrix.variant }}-windows
          path: backend/dist/midori-autofighter-${{ matrix.variant }}-windows.exe
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [non-llm, llm-cpu, llm-cuda, llm-amd]
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: astral-sh/setup-uv@v3
        with:
          python-version: '3.12'
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Setup backend environment
        working-directory: backend
        run: |
          uv sync
          
      - name: Install backend variant dependencies
        working-directory: backend
        run: |
          case "${{ matrix.variant }}" in
            "llm-cpu")
              uv sync --extra llm-cpu
              ;;
            "llm-cuda")
              uv sync --extra llm-cuda
              ;;
            "llm-amd")
              uv sync --extra llm-amd
              ;;
          esac
          
      - name: Install PyInstaller for backend
        working-directory: backend
        run: uv add --dev pyinstaller
        
      - name: Build frontend
        working-directory: frontend
        run: |
          bun install
          bun run build
          
      - name: Build backend executable
        working-directory: backend
        run: |
          DATA_ARGS="--add-data ../frontend/build:frontend"
          uv run pyinstaller --onefile $DATA_ARGS --clean --name midori-autofighter-${{ matrix.variant }}-linux app.py
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-${{ matrix.variant }}-linux
          path: backend/dist/midori-autofighter-${{ matrix.variant }}-linux
          retention-days: 30

  build-android:
    runs-on: ubuntu-latest
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Build frontend for mobile
        working-directory: frontend
        run: |
          bun install
          bun run build
          
      - name: Setup mobile build environment
        working-directory: build/mobile
        run: |
          bun install
          
      - name: Build Android APK
        working-directory: build/mobile
        run: |
          # Sync frontend build to Capacitor
          bun run sync
          
          # Build APK
          cd android
          ./gradlew assembleDebug
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: midori-autofighter-non-llm-android
          path: build/mobile/android/app/build/outputs/apk/debug/*.apk
          retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-windows, build-linux, build-android]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*/*
          body: |
            ## Midori AutoFighter Release
            
            This release includes builds for:
            
            ### Windows
            - midori-autofighter-non-llm-windows.exe (Base game)
            - midori-autofighter-llm-cpu-windows.exe (CPU-based LLM support)
            - midori-autofighter-llm-cuda-windows.exe (NVIDIA GPU LLM support)
            - midori-autofighter-llm-amd-windows.exe (AMD GPU LLM support)
            
            ### Linux
            - midori-autofighter-non-llm-linux (Base game)
            - midori-autofighter-llm-cpu-linux (CPU-based LLM support)
            - midori-autofighter-llm-cuda-linux (NVIDIA GPU LLM support)
            - midori-autofighter-llm-amd-linux (AMD GPU LLM support)
            
            ### Android
            - midori-autofighter-non-llm-android.apk (Base game)
            
            Download the appropriate version for your platform and LLM requirements.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}